"""
Problem 12: The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

What is the value of the first triangle number to have over five hundred divisors?
"""

import time
from itertools import count

def lowest_sqrt(x):
    i = 1
    while i * i <= x:
        i *= 2
        y = 0
    while i > 0:
        if (y + i)**2 <= x:
            y += i
        i //= 2
    return y

# Returns list of integers that divide n.
def solution_12(n):
    end_of_list = lowest_sqrt(n)
    ans = sum(2 for i in range(1, end_of_list + 1) if n % i == 0)
    if end_of_list**2 == n:
        ans -= 1
    return ans


if __name__ == "__main__":
    start_time = time.time()
    triangle = 0
    for i in count(1):
        triangle += i
        if solution_12(triangle) > 500:
            print(str(triangle))
            break
    print("--- %s seconds ---" % (time.time() - start_time))
